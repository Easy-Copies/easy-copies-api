generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String              @id @default(uuid())
  name           String              @db.VarChar(255)
  email          String              @unique @db.VarChar(255)
  isUserVerified Boolean             @default(false)
  password       String              @db.VarChar(255)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  tokens         Token[]
  roles          RoleUser[]
  stores         Store[]
  storeApprovals StoreApprovalUser[]

  @@map("users")
}

model Token {
  id        String    @id @default(uuid())
  token     String    @db.Text
  usedAt    DateTime?
  type      TokenType
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@map("tokens")
}

enum TokenType {
  Login
  RefreshToken
  ForgotPassword
  VerifyUser
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique @db.VarChar(255)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       RoleUser[]
  permissions PermissionRole[]

  @@map("roles")
}

model RoleUser {
  id        String   @unique @default(uuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId    String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, roleId])
  @@map("role_users")
}

model Permission {
  code  String           @id
  roles PermissionRole[]

  @@map("permissions")
}

model PermissionRole {
  id             String     @unique @default(uuid())
  permission     Permission @relation(fields: [permissionCode], references: [code], onDelete: Cascade, onUpdate: Cascade)
  permissionCode String
  role           Role       @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId         String
  actions        Json       @default("{\"create\": false, \"read\": false, \"update\": false, \"delete\": false}")
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@id([permissionCode, roleId])
  @@map("permission_roles")
}

model Province {
  code      String    @id @unique
  name      String
  regencies Regency[]
  stores    Store[]

  @@map("provinces")
}

model Regency {
  code         String     @id @unique
  province     Province   @relation(fields: [provinceCode], references: [code])
  provinceCode String
  name         String
  districts    District[]
  stores       Store[]

  @@map("regencies")
}

model District {
  code        String  @id
  regency     Regency @relation(fields: [regencyCode], references: [code])
  regencyCode String
  name        String
  stores      Store[]

  @@map("districts")
}

model Store {
  id             String               @id @default(uuid())
  name           String
  description    String               @db.Text
  phoneNumber    String
  email          String
  address        String               @db.Text
  addressNote    String?
  province       Province             @relation(fields: [provinceCode], references: [code])
  provinceCode   String
  regency        Regency              @relation(fields: [regencyCode], references: [code])
  regencyCode    String
  district       District             @relation(fields: [districtCode], references: [code])
  districtCode   String
  postalCode     String
  mapCoordinate  Json?
  storeLogo      String?              @db.Text
  storePhoto     String               @db.Text
  nik            String
  ktpPhoto       String
  npwp           String?
  npwpPhoto      String?
  user           User                 @relation(fields: [userId], references: [id])
  userId         String
  status         StoreApprovalStatus?
  isOpen         Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  storeApprovals StoreApprovalUser[]
  storeServices  StoreService[]

  @@map("stores")
}

model StoreApprovalUser {
  id                String              @id @default(uuid())
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
  store             Store               @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId           String
  status            StoreApprovalStatus
  statusDescription String              @db.Text
  reviseComment     String?
  rejectReason      String?
  createdAt         DateTime            @default(now())

  @@map("store_approval_users")
}

enum StoreApprovalStatus {
  Pending
  Cancel
  Rejected
  Revise
  Revised
  OnReview
  Approved
}

model StoreService {
  id            String           @id @default(uuid())
  name          StoreServiceName
  store         Store            @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId       String
  price         Float
  pricePerSheet Float?
  bindingType   String?
  fotocopyType  String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@map("store_services")
}

enum StoreServiceName {
  Laminating
  Priting
  Jilid
  Fotocopy
}
